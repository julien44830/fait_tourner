import { useGoogleLogin } from "@react-oauth/google";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios";
import { useAuth } from "../context/AuthContext"; // ‚úÖ Utilise le contexte d'authentification
import { getEnvApiUrl } from "../utils/getEnvApiUrl"; // ‚úÖ Utilitaire pour obtenir l'URL de l'API

/**
 * Composant `GoogleConnexion`
 *
 * üéØ Ce composant permet √† l'utilisateur de **se connecter via Google OAuth 2.0**.
 * Il utilise la strat√©gie "implicit flow" pour r√©cup√©rer un `access_token` Google,
 * qu'il transmet ensuite √† l'API backend pour obtenir un JWT.
 *
 * ‚úÖ G√®re la connexion classique et le cas particulier d'une **invitation via token dans l'URL**.
 * ‚úÖ Met √† jour le contexte d‚Äôauthentification avec le token JWT re√ßu du backend.
 * ‚úÖ Redirige l‚Äôutilisateur vers `/accueil` apr√®s une connexion r√©ussie.
 */

export default function GoogleConnexion() {
    const navigate = useNavigate();
    const location = useLocation();
    const params = new URLSearchParams(location.search);
    const invitationToken = params.get("token");

    const { login } = useAuth(); // R√©cup√®re la fonction login du contexte

    // ‚öôÔ∏è Initialisation de la connexion Google avec les handlers de succ√®s/erreur
    const googleLogin = useGoogleLogin({
        flow: "implicit", // ‚ö†Ô∏è Utilisation du flux implicite c√¥t√© client
        onSuccess: async (tokenResponse) => {
            try {
                // üîê Appel au backend avec l'access_token Google
                const res = await axios.post(
                    `${getEnvApiUrl()}/api/auth/google/token`, // ‚úÖ URL dynamique
                    {
                        access_token: tokenResponse.access_token,
                        token: invitationToken, // Inclut le token d'invitation s‚Äôil est pr√©sent
                    }
                );

                // üîì Mise √† jour du contexte et du localStorage
                login(res.data.token);
                localStorage.setItem("name", res.data.user.name);

                // ‚úÖ Redirection vers la page d‚Äôaccueil
                navigate("/accueil");
            } catch (err) {
                console.error("‚ùå Erreur de login Google :", err);
            }
        },
        onError: (errorResponse) => {
            console.error("‚ùå Erreur Google OAuth :", errorResponse);
        },
    });

    return (
        <button
            onClick={() => googleLogin()} // D√©clenche le login Google
            className="connexion-google"
        >
            <img
                src="/images/google.png"
                alt="Google"
                className="google-logo"
            />
            Connexion avec Google
        </button>
    );
}
