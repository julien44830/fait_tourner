// src/component/InviteModal.test.tsx
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import InviteModal from "./InviteModal";

// üßπ Avant chaque test : on remet un token simul√© dans le localStorage
beforeEach(() => {
    localStorage.setItem("token", "fake-token");
});

// üßº Apr√®s chaque test : on reset les mocks
afterEach(() => {
    jest.resetAllMocks();
});

describe("InviteModal", () => {
    it("envoie une invitation avec le bon bookId, email et token", async () => {
        const bookId = 42;
        const fakeEmail = "invite@test.com";

        // mock de la fonction fetch
        (global.fetch as jest.Mock) = jest.fn(() =>
            Promise.resolve({
                ok: true,
                json: () => Promise.resolve({ success: true }),
            })
        );

        // rend le composant
        render(<InviteModal bookId={bookId} />);

        const emailInput = screen.getByPlaceholderText("Email de l'invit√©");
        const submitButton = screen.getByRole("button", {
            name: /envoyer l'invitation/i,
        });

        // Simulation de saisie && clic
        fireEvent.change(emailInput, { target: { value: fakeEmail } });
        console.log("üìß Email saisi :", emailInput.getAttribute("value"));

        fireEvent.click(submitButton);

        // Attente de l'apparition du message de confirmation
        await waitFor(() =>
            expect(
                screen.getByText(/invitation envoy√©e avec succ√®s/i)
            ).toBeInTheDocument()
        );
        console.log("‚úÖ Message de confirmation affich√©");

        // V√©rification que fetch a bien √©t√© appel√©
        expect(fetch).toHaveBeenCalled();

        // Analyse des param√®tres transmis √† fetch
        const fetchArgs = (fetch as jest.Mock).mock.calls[0];

        if (!fetchArgs || fetchArgs.length < 2) {
            throw new Error(
                "‚ùå Les arguments de fetch sont manquants ou incomplets."
            );
        }

        const url = fetchArgs[0];
        const options = fetchArgs[1];
        const body = JSON.parse(options.body);
        const token = options.headers.Authorization;

        console.log("üîó URL appel√©e :", url);
        console.log("üì¶ Donn√©es envoy√©es √† l'API :", body);
        console.log("ü™™ Token envoy√© :", token);

        // ‚úÖ V√©rifications finales
        expect(url).toBe(
            "https://faittourner-production.up.railway.app/api/invite"
        );
        expect(body.email).toBe(fakeEmail);
        expect(body.bookId).toBe(bookId);
        expect(token).toBe("Bearer fake-token");
    });

    it("affiche un message d'erreur si l'API √©choue", async () => {
        console.log("test en cas d'erreur");
        const bookId = 42;
        const fakeEmail = "erreur@test.com";

        // üß™ Mock fetch pour simuler une r√©ponse avec erreur
        (global.fetch as jest.Mock) = jest.fn(() =>
            Promise.resolve({
                ok: false,
                json: () =>
                    Promise.resolve({
                        error: "Erreur personnalis√©e depuis l'API",
                    }),
            })
        );

        render(<InviteModal bookId={bookId} />);

        const emailInput = screen.getByPlaceholderText("Email de l'invit√©");
        const submitButton = screen.getByRole("button", {
            name: /envoyer l'invitation/i,
        });

        // üñ±Ô∏è Simulation de la saisie + clic
        fireEvent.change(emailInput, { target: { value: fakeEmail } });
        console.log("üìß Email saisi :", emailInput.getAttribute("value"));

        fireEvent.click(submitButton);
        console.log("üöÄ Requ√™te envoy√©e au clic du bouton");

        // ‚úÖ V√©rifie que le message d'erreur s'affiche
        await waitFor(() =>
            expect(
                screen.getByText(/erreur personnalis√©e depuis l'api/i)
            ).toBeInTheDocument()
        );
        console.log("‚ùå Message d'erreur affich√© avec succ√®s");

        // ‚úÖ V√©rifie que fetch a √©t√© appel√© avec les bons param√®tres
        expect(fetch).toHaveBeenCalled();

        const fetchArgs = (fetch as jest.Mock).mock.calls[0];
        if (!fetchArgs || fetchArgs.length < 2) {
            throw new Error(
                "‚ùå Les arguments de fetch sont manquants ou incomplets."
            );
        }

        const url = fetchArgs[0];
        const options = fetchArgs[1];
        const body = JSON.parse(options.body);
        const token = options.headers.Authorization;

        console.log("üîó URL appel√©e :", url);
        console.log("üì¶ Donn√©es envoy√©es √† l'API :", body);
        console.log("ü™™ Token envoy√© :", token);
    });
});
