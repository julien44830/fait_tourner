import multer from "multer";
import path from "path";
import fs from "fs";

// ðŸ“‚ DÃ©finition du stockage avec `multer.diskStorage`
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const bookId = req.params.bookId;
    console.log("ðŸ“¦ req.params dans destination:", req.params);

    // VÃ©rifier que bookId est valide
    if (!bookId || typeof bookId !== "string") {
      return cb(new Error("Book ID invalide ou manquant"), "");
    }

    // ðŸ“‚ DÃ©finir le chemin du sous-dossier
    const uploadPath = path.join(__dirname, "../../uploads", bookId);

    // ðŸ“‚ VÃ©rifier si le dossier existe, sinon le crÃ©er
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }

    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    // ðŸ”¥ Renommer le fichier avec un timestamp unique
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

// ðŸ“Œ Configuration de Multer
const upload = multer({ storage });

export default upload; // ðŸ”¥ Exporter `upload` pour l'utiliser ailleurs
