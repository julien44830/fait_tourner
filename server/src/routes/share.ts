import express, { Request, Response } from "express";
import { getConnection } from "../dbconfig";
import jwt from "jsonwebtoken";
import { sendInvitationEmail } from "../service/mailerService";
import { verifyToken } from "../middleware/authMiddleware";

const router = express.Router();

interface AuthRequest extends Request {
  user?: { id: string };
}

// üì® Route pour inviter un utilisateur √† rejoindre un book
router.post("/invite", verifyToken, async (req: Request, res: Response): Promise<void> => {
  const userId = (req as AuthRequest).user?.id;
  ("üì© Requ√™te re√ßue pour /invite");
  ("üßæ Body de la requ√™te :", req.body);
  ("üë§ ID de l'utilisateur connect√© :", userId);

  if (!userId) {
    console.warn("üö´ Utilisateur non authentifi√© !");
    res.status(401).json({ error: "Non autoris√©." });
    return;
  }

  try {
    const { email, bookId } = req.body;
    ("üì¨ Email cible :", email);
    ("üìò ID du book cible :", bookId);

    if (!email || !bookId) {
      console.warn("‚ö†Ô∏è Email ou bookId manquant");
      res.status(400).json({ error: "Email ou ID du book manquant." });
      return;
    }

    const connection = await getConnection();
    ("üîå Connexion √† la base OK");

    // üîç V√©rification du book
    const [bookResult]: any = await connection.execute(
      `SELECT name, owner_id FROM book WHERE id = ?`,
      [bookId]
    );
    ("üîç R√©sultat de la recherche du book :", bookResult);

    if (bookResult.length === 0) {
      console.warn("‚ùå Book non trouv√© :", bookId);
      res.status(404).json({ error: "Book non trouv√©." });
      return;
    }

    const { name: bookName, owner_id } = bookResult[0];
    ("üìó Nom du book :", bookName);
    ("üëë Propri√©taire du book :", owner_id);

    if (userId !== owner_id) {
      console.warn("üö´ L'utilisateur n'est pas l'auteur du book");
      res.status(403).json({ error: "Vous n'√™tes pas l'auteur de ce book." });
      return;
    }

    // üîç V√©rifier si l'utilisateur invit√© existe
    const [userRows]: any = await connection.execute(
      `SELECT id FROM user WHERE email = ?`,
      [email]
    );
    ("üë§ R√©sultat de la recherche d'utilisateur :", userRows);

    let inviteToken: string;
    let inviteLink: string;

    if (userRows.length > 0) {
      const invitedUserId = userRows[0].id;
      ("‚úÖ Utilisateur cible trouv√© :", invitedUserId);

      const [bookLink]: any = await connection.execute(
        `SELECT * FROM users_book WHERE user_id = ? AND book_id = ?`,
        [invitedUserId, bookId]
      );
      ("üîç Lien existant avec le book :", bookLink);

      if (bookLink.length === 0) {
        ("üîó Aucun lien trouv√©, ajout de l'utilisateur au book...");
        await connection.execute(
          `INSERT INTO users_book (user_id, book_id, is_owner, role) VALUES (?, ?, 0, 'viewer')`,
          [invitedUserId, bookId]
        );
        ("‚úÖ Utilisateur ajout√© au book :", invitedUserId, bookId);
      } else {
        ("‚ÑπÔ∏è L'utilisateur est d√©j√† membre du book.");
      }

      // G√©n√©rer le token pour un utilisateur d√©j√† inscrit
      inviteToken = jwt.sign({ bookId, email }, process.env.SECRET_KEY as string, {
        expiresIn: "7d",
      });
      inviteLink = `https://www.pictevent.fr/accepter-invitation?token=${inviteToken}`;
      ("üîó Lien d'invitation g√©n√©r√© (existant) :", inviteLink);
    } else {
      // G√©n√©rer le token pour un nouvel utilisateur
      ("‚ûï L'utilisateur n'existe pas encore, g√©n√©ration d'un lien d'inscription...");
      inviteToken = jwt.sign({ email, bookId }, process.env.SECRET_KEY as string, {
        expiresIn: "7d",
      });
      inviteLink = `https://www.pictevent.fr/inscription?token=${inviteToken}`;
      ("üîó Lien d'inscription g√©n√©r√© :", inviteLink);
    }

    // ‚úâÔ∏è Envoi de l'email
    ("üì® Envoi de l'email...");
    const mailResponse = await sendInvitationEmail(email, bookName, inviteLink);
    ("üì¨ R√©sultat du service d'email :", mailResponse);

    if (!mailResponse.success) {
      console.error("‚ùå Erreur lors de l'envoi de l'email :", mailResponse.message);
      res.status(500).json({ error: "Erreur lors de l'envoi de l'email." });
      return;
    }

    ("‚úÖ Invitation envoy√©e avec succ√®s !");
    res.json({ message: "‚úÖ Invitation envoy√©e avec succ√®s !" });
  } catch (error) {
    console.error("‚ùå Erreur serveur pendant l'invitation :", error);
    res.status(500).json({ error: "Erreur serveur." });
  }
});

export default router;
